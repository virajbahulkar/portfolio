---
import '@styles/custom.css';

import BreadCrumb from '@components/BreadCrumb';
import { Navbar } from '@partials/Navbar';
import { AppConfig } from '@utils/AppConfig';
import { personSchemaMarkup, websiteSchemaMarkup } from '@utils/schemaMarkup';

export interface Props {
  head: {
    title: string;
    description: string;
    ogImage?: string;
    ogType?: string;
    url?: string;
  };
}

const {
  head: { title, description, ogImage, ogType, url },
} = Astro.props as Props;
---

<html lang="en" data-theme="light">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="msvalidate.01" content="A3AA1AEE6C57EE63539E74E67696D204" />
    <meta name="yandex-verification" content="80c2ec5bdd10aed3" />
    <meta property="og:type" content={ogType || 'website'} />
    <meta property="og:site_name" content={AppConfig.site_name} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:url" content={url || AppConfig.site_url} />
    <meta property="og:image" content={`${ogImage}`} />
    <meta property="og:image:alt" content={AppConfig.title} />

    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:widgets:new-embed-design" content="on" />
    <meta name="twitter:site" content={AppConfig.twitter_handle} />
    <meta name="twitter:url" content={url || AppConfig.site_url} />
    <meta name="twitter:creator" content={AppConfig.twitter_handle} />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={ogImage} />
    <meta name="twitter:image:alt" content={AppConfig.title} />

    <title>{title}</title>
    <meta name="description" content={description} />
    <meta name="author" content={AppConfig.author} />
    <meta name="keywords" content={AppConfig.keywords} />
    <link rel="alternate" type="application/rss+xml" href="/rss.xml" />
    <link rel="canonical" href={url || AppConfig.site_url} />
    <link rel="sitemap" href="/sitemap-index.xml" />
    <link rel="icon" type="image/x-icon" href="/assets/images/favicon.png" />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/gh/devicons/devicon@v2.15.1/devicon.min.css"
    />
    <script
      is:inline
      type="application/ld+json"
      set:html={JSON.stringify(websiteSchemaMarkup)}
    >

    </script>

    <script
      is:inline
      type="application/ld+json"
      set:html={JSON.stringify(personSchemaMarkup)}
    >

    </script>

    <!-- Google tag (gtag.js) -->
    <script
      is:inline
      async
      src="https://www.googletagmanager.com/gtag/js?id=G-NXPS1JLJ55"
    >

    </script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag() {
        dataLayer.push(arguments);
      }
      gtag('js', new Date());

      gtag('config', 'G-NXPS1JLJ55');
    </script>
  </head>
  <body class="bg-base-100">
    <Navbar path={Astro.url.pathname} client:load />

    <div class="container  mx-auto p-4">
      <div class="pl-4">
        <BreadCrumb path={Astro.url.pathname} />
      </div>

      <slot />
    </div>

    <!-- Custom jsPDF PDF export script -->
    <script async src="/assets/js/jspdf.umd.min.js"></script>
    <script async>
      document.addEventListener('DOMContentLoaded', function () {
        const btn = document.getElementById('download-pdf');
        const errorSpan = document.getElementById('pdf-error');
        function isMobile() {
          return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
        }
        function triggerDownload(doc, filename) {
          if (isMobile()) {
            try {
              const blob = doc.output('blob');
              const url = URL.createObjectURL(blob);
              const a = document.createElement('a');
              a.href = url;
              a.download = filename;
              document.body.appendChild(a);
              a.click();
              setTimeout(() => {
                document.body.removeChild(a);
                URL.revokeObjectURL(url);
              }, 100);
            } catch (e) {
              if (errorSpan) {
                errorSpan.textContent = 'PDF download failed. Please try a desktop browser.';
                errorSpan.style.display = 'inline';
              }
            }
          } else {
            try {
              doc.save(filename);
            } catch (e) {
              if (errorSpan) {
                errorSpan.textContent = 'PDF download failed. Please refresh and try again.';
                errorSpan.style.display = 'inline';
              }
            }
          }
        }
        function enableButton() {
          btn.disabled = false;
          btn.style.opacity = '1';
        }
        function disableButton() {
          btn.disabled = true;
          btn.style.opacity = '0.5';
        }
        // Wait for jsPDF to load
        if (!window.jspdf) {
          disableButton();
          let tries = 0;
          const interval = setInterval(() => {
            if (window.jspdf) {
              enableButton();
              clearInterval(interval);
            } else if (++tries > 20) {
              if (errorSpan) {
                errorSpan.textContent = 'PDF feature failed to load. Please refresh.';
                errorSpan.style.display = 'inline';
              }
              clearInterval(interval);
            }
          }, 200);
        } else {
          enableButton();
        }
        if (btn) {
          btn.addEventListener('click', function () {
            if (!window.jspdf) {
              if (errorSpan) {
                errorSpan.textContent = 'PDF feature not loaded. Please refresh.';
                errorSpan.style.display = 'inline';
              }
              return;
            }
            
            try {
              const { jsPDF } = window.jspdf;
              const doc = new jsPDF({ unit: 'pt', format: 'a4', orientation: 'portrait' });
              const pageHeight = doc.internal.pageSize.getHeight();
              const marginBottom = 40;
              function checkPageBreak(y) {
                if (y > pageHeight - marginBottom) {
                  doc.addPage();
                  return 40; // Reset y to top margin for new page
                }
                return y;
              }
              let y = 40;
              doc.setFont('helvetica', 'bold');
              doc.setFontSize(22);
              doc.text('Viraj Bahulkar - Resume', 40, y);
              y += 30; y = checkPageBreak(y);
              doc.setFontSize(16);
              doc.text('Profile', 40, y);
              y += 20; y = checkPageBreak(y);
              doc.setFontSize(12);
              doc.setFont('helvetica', 'normal');
              doc.text('Senior engineer with proven expertise in designing, architecting, and delivering scalable software solutions for global clients. Adept at leading engineering teams, mentoring developers, and collaborating with stakeholders to drive business outcomes. Proficient in ReactJS, NodeJS, Git, SASS, JavaScript, HTML, CSS, Azure DevOps, Docker, Kubernetes, AWS, and cloud-native development. Experienced in building high-performance React components, optimizing backend services, and implementing CI/CD pipelines. Strong hands-on experience with Node.js tools, cloud infrastructure, and DevOps practices. Committed to engineering excellence, clean code, and agile methodologies.', 40, y, { maxWidth: 500 });
              y += 60; y = checkPageBreak(y);
              doc.setFontSize(16);
              doc.setFont('helvetica', 'bold');
              y += 30; y = checkPageBreak(y);
              y += 30; y = checkPageBreak(y);
              doc.text('Life', 40, y);
              y += 20; y = checkPageBreak(y);
              doc.setFontSize(12);
              doc.setFont('helvetica', 'normal');
              doc.text('Born and raised in Pune, India, I developed a passion for technology and problem-solving from an early age. Navigating through various challenges, I embraced self-learning and freelancing, building practical skills in web development and cloud technologies. This journey of independent learning and hands-on experience laid a strong foundation for my professional growth and leadership in engineering.', 40, y, { maxWidth: 500 });
              y += 60; y = checkPageBreak(y);
              doc.setFontSize(16);
              doc.setFont('helvetica', 'bold');
              y += 30; y = checkPageBreak(y);
              doc.text('Education', 40, y);
              y += 20; y = checkPageBreak(y);
              doc.setFontSize(12);
              doc.text('Bachelor of Science (B.Sc.) in Computer Science', 40, y);
              y += 16; y = checkPageBreak(y);
               doc.setFont('helvetica', 'normal');
              doc.text('2011 to 2017 (Officially completed in 2014, delayed to 2017) - Trained as a freelancer during the gap.', 60, y, { maxWidth: 480 });
              y += 16; y = checkPageBreak(y);
              y += 16; y = checkPageBreak(y);
              doc.setFontSize(12);
              doc.setFont('helvetica', 'bold');
              doc.text('12th Grade (Higher Secondary Education)', 40, y);
               y += 16; y = checkPageBreak(y);
              doc.setFont('helvetica', 'normal');
              doc.text('Completed in 2011', 60, y);
              y += 16; y = checkPageBreak(y);
              doc.setFontSize(12);
              doc.setFont('helvetica', 'bold');
              doc.text('Secondary education', 40, y);
              y += 16; y = checkPageBreak(y);
               doc.setFont('helvetica', 'normal');
              doc.text('Completed in 2009', 60, y);
              doc.setFontSize(16);
              doc.setFont('helvetica', 'bold');
              y += 30; y = checkPageBreak(y);
              doc.text('Experience', 40, y);
              // Helper to add wrapped text and handle page breaks
              function addWrappedText(text, x, y, options = {}) {
                const lines = doc.splitTextToSize(text, options.maxWidth || 480);
                for (let i = 0; i < lines.length; i++) {
                  y += (options.lineHeight || 16);
                  y = checkPageBreak(y);
                  doc.text(lines[i], x, y);
                }
                return y;
              }

              // Cognizant
              doc.setFontSize(13); doc.setFont('helvetica', 'bold');
              y += 20; y = checkPageBreak(y);
              doc.text('Senior Software Engineer at Cognizant Technology Solutions, India (Dec 2021 – Present)', 40, y, {maxWidth: 480});
              doc.setFontSize(12); doc.setFont('helvetica', 'normal');
              y += 20; y = checkPageBreak(y);
              y = addWrappedText('- Worked on Finance Group\'s app, streamlining registration/tracking processes for improved efficiency.', 60, y, { maxWidth: 500 });
              y = addWrappedText('- Architected modular, maintainable codebases and drove adoption of best practices in code reviews, CI/CD pipelines, and cloud deployments (AWS, Azure).', 60, y);
              y = addWrappedText('- Mentored junior engineers, fostering a culture of continuous learning, technical excellence, and ownership.', 60, y);
              y = addWrappedText('- Collaborated with product managers and stakeholders to translate business requirements into robust technical solutions, influencing strategic direction.', 60, y);
              y = addWrappedText('- Implemented advanced monitoring, logging, and observability using cloud tools, reducing downtime and improving system reliability.', 60, y);
              y = addWrappedText('- Championed DevOps initiatives, automating deployments and optimizing cloud infrastructure for cost and performance.', 60, y);
              y = addWrappedText('- Modernized legacy codebases, transitioning monolithic services to microservices and serverless architectures.', 60, y);
              y = addWrappedText('- Ensured 100% on-time delivery and adherence to agile project lifecycle methodology.', 60, y);
              y = addWrappedText('- Proactively resolved issues, improving team productivity and stakeholder satisfaction.', 60, y);
              y = addWrappedText('Technologies: ReactJS, NodeJS, REST APIs, JavaScript, TypeScript, AWS, Azure, Docker, Kubernetes, Git, CI/CD, Monitoring', 60, y);

              // Saeloun
              doc.setFontSize(13); doc.setFont('helvetica', 'bold');
              y += 32; y = checkPageBreak(y);
              doc.text('Senior Software Engineer at Saeloun Technologies Pvt. Ltd., India (Apr 2021 – Dec 2021)', 40, y, { maxWidth: 500 });
              doc.setFontSize(12); doc.setFont('helvetica', 'normal');
              y += 20; y = checkPageBreak(y);
              y = addWrappedText('Project #1: ToolJet (Open Source Low-Code Platform)', 60, y);
              y = addWrappedText('- Debugged client codes, reducing issues and improving reliability for enterprise customers.', 80, y);
              y = addWrappedText('- Collaborated with experts, enhancing platform functionality and user satisfaction rates.', 80, y);
              y = addWrappedText('- Improved user interfaces using ReactJS and optimized backend with NodeJS, leading to higher functionality and fewer crashes.', 80, y);
              y = addWrappedText('- Contributed to cloud deployment strategies and infrastructure automation for open source projects.', 80, y);
              y = addWrappedText('Project #2: WanderWhale (Travel Information Portal)', 60, y);
              y = addWrappedText('- Optimized designs using ReactJS and backend performance with NodeJS techniques.', 80, y);
              y = addWrappedText('- Collaborated with teams to resolve issues quickly, ensuring seamless delivery and enhanced user experience.', 80, y);
              y = addWrappedText('- Implemented CI/CD pipelines and cloud hosting for improved scalability and reliability.', 80, y);
              y = addWrappedText('Technologies: ReactJS, NodeJS, PostgreSQL, JavaScript, TypeScript, Git, SASS, AWS, Docker', 80, y);

              // Autoflow
              doc.setFontSize(13); doc.setFont('helvetica', 'bold');
              y += 32; y = checkPageBreak(y);
              doc.text('Technical Head / Senior Software Engineer / Software Developer at Autoflow Technologies Pvt. Ltd. (May 2017 – Apr 2021)', 40, y, {maxWidth: 480});
              y += 20; y = checkPageBreak(y);
              doc.setFontSize(12); doc.setFont('helvetica', 'normal');
              y = addWrappedText('Project #1: Compass (Agent Portal App)', 60, y);
              y = addWrappedText('- Built and architected applications showing business contributions, enhancing engagement and scalability.', 80, y);
              y = addWrappedText('- Transformed data into actionable reports, promoting data-driven decisions for leadership.', 80, y);
              y = addWrappedText('- Managed SDLC with NodeJS, ensuring 100% on-time delivery and improved productivity.', 80, y);
              y = addWrappedText('Project #2: Digitizer App (No-Code Platform)', 60, y);
              y = addWrappedText('- Developed the Digitizer App using ReactJS, NodeJS & Git, focusing on modularity and scalability.', 80, y);
              y = addWrappedText('- Managed front-end and back-end functionalities, increasing user engagement and system robustness.', 80, y);
              y = addWrappedText('- Created complex components (Timelines, Dynamic Tables, Complex Forms) to enhance app functionality.', 80, y);
              y = addWrappedText('- Delivered high-quality work achieving client satisfaction and business impact.', 80, y);
              y = addWrappedText('- Implemented cloud-based storage and serverless functions for improved performance.', 80, y);
              y = addWrappedText('Project #3: Governance Framework (In-House Project)', 60, y);
              y = addWrappedText('- Built a 360-degree organizational view application, enhancing collaboration and communication.', 80, y);
              y = addWrappedText('- Implemented UI & REST API development using NodeJS for better interface and functionality.', 80, y);
              y = addWrappedText('- Developed drag & drop, tree-level table features using ReactJS & NodeJS, increasing app engagement.', 80, y);
              y = addWrappedText('Project #4: Vendor Management System', 60, y);
              y = addWrappedText('- Managed SDLC, ensuring 100% on-time delivery and successful outcomes.', 80, y);
              y = addWrappedText('- Automated vendor registration using ReactJS, NodeJS, Git, HTML, CSS & JavaScript, reducing processing time and increasing accuracy.', 80, y);
              y = addWrappedText('- Established an approval/rejection system, enhancing efficiency and minimizing errors.', 80, y);
              y = addWrappedText('- Architected cloud-based workflows for scalability and security.', 80, y);
              y = addWrappedText('Project #5: HR 360 Feedback Portal', 60, y);
              y = addWrappedText('- Implemented a digital feedback system using ReactJS, NodeJS, Git, HTML, CSS & JavaScript, replacing paper-based methods.', 80, y);
              y = addWrappedText('- Deployed a new feedback mechanism for quicker feedback processing, improving appraisal efficiency.', 80, y);
              y = addWrappedText('- Set up an admin panel generating chart-based reports, empowering data-driven decisions.', 80, y);
              y = addWrappedText('- Integrated cloud analytics and reporting for leadership insights.', 80, y);
              y = addWrappedText('Technologies: ReactJS, NodeJS, ExpressJS, Docker, MongoDB, PostgreSQL, JavaScript, Git, HTML, CSS, AWS, Azure', 80, y);

              // Freelancing
              doc.setFontSize(13); doc.setFont('helvetica', 'bold');
              y += 32; y = checkPageBreak(y);
              doc.text('Freelancing & Skill Development (2014 - 2017)', 40, y);
              doc.setFontSize(12); doc.setFont('helvetica', 'normal');
              y = addWrappedText('- Worked as a freelancer, developing skills in various web and cloud technologies, preparing for a professional career in software development and engineering leadership.', 60, y);

              // Skills (dynamic from cv.astro structure)
              const skills = [
                { name: 'ReactJS', description: 'Building scalable, high-performance UIs and reusable components.' },
                { name: 'NodeJS', description: 'Backend development, REST APIs, and server-side architecture.' },
                { name: 'ExpressJS', description: 'Node.js web framework for RESTful APIs.' },
                { name: 'TypeScript', description: 'Type-safe JavaScript for robust, maintainable codebases.' },
                { name: 'HTML/CSS/SASS', description: 'Semantic markup, responsive layouts, and advanced styling.' },
                { name: 'JavaScript', description: 'Core language for web development and dynamic applications.' },
                { name: 'PostgreSQL/MongoDB', description: 'Relational and NoSQL database design and optimization.' },
                { name: 'Docker/Kubernetes', description: 'Containerization, orchestration, and cloud-native deployments.' },
                { name: 'AWS/Azure', description: 'Cloud infrastructure, DevOps, and scalable solutions.' },
                { name: 'Git', description: 'Version control, branching strategies, and code collaboration.' },
                { name: 'CI/CD', description: 'Automated build, test, and deployment pipelines.' },
                { name: 'DevOps', description: 'Automation, monitoring, and infrastructure as code.' },
                { name: 'Leadership/Mentoring', description: 'Guiding teams, code reviews, and technical growth.' }
              ];
              doc.setFontSize(16); doc.setFont('helvetica', 'bold');
              y += 40; y = checkPageBreak(y);
              doc.text('Skills', 40, y);
              y += 20; y = checkPageBreak(y);
              doc.setFontSize(12);
              for (const skill of skills) {
                doc.setFont('helvetica', 'bold');
                doc.text(`• ${skill.name}`, 40, y);
                doc.setFont('helvetica', 'normal');
                y = addWrappedText(skill.description, 60, y, { maxWidth: 460 });
                y += 20; y = checkPageBreak(y);
              }
              doc.save('Viraj_Bahulkar_CV.pdf');
            } catch (e) {
              if (errorSpan) {
                errorSpan.textContent = 'PDF generation failed. Please refresh and try again.';
                errorSpan.style.display = 'inline';
              }
            }
          });
        }
      });
    </script>
    <script>
      const theme_selectors = document.querySelectorAll(
        '#theme-selector div[data-theme]'
      );
      const theme = window.sessionStorage.getItem('data-theme');

      if (theme) {
        updateTheme(theme);
      } else {
        updateTheme('light');
      }

      theme_selectors.forEach((selector) => {
        selector.addEventListener('click', () => {
          updateTheme(selector.getAttribute('data-theme'));
        });
      });

      function updateTheme(newTheme) {
        document
          .querySelector(
            "#theme-selector div[data-set-theme='" + newTheme + "']"
          )
          .classList.add('outline');
        document.querySelector('html').setAttribute('data-theme', newTheme);
        window.sessionStorage.setItem('data-theme', newTheme);
      }
    </script>
    <noscript>
      <!-- Netlify uses this to detect the form at build time -->
      <form name="contact" netlify hidden>
        <input type="text" name="email" />
        <textarea name="message"></textarea>
      </form>
    </noscript>
    <!-- Google tag (gtag.js) -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-EEN224QZ8C"
    >

    </script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag() {
        dataLayer.push(arguments);
      }
      gtag('js', new Date());

      gtag('config', 'G-EEN224QZ8C');
    </script>
    
  </body>
</html>
